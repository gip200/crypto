#!/usr/bin/env python3

#from nacl.secret import SecretBox
#from nacl.exceptions import CryptoError
import sys
import json
import binascii
import secrets
from Crypto.Cipher import AES

#def xor_bytes(a, b):
#    assert len(a) == len(b)
#    # the one-liner version, using a "generator expression" and the "zip iterator"
#   return bytes(x ^ y for x, y in zip(a, b))


inputs = json.load(sys.stdin)
outputs = {}


## problem 1
##
##   "problem 1":
##        {
##            "nums": [3, 4, 5, 6]
##        },
##
##  OUTPUT:     "problem 1" : [true, false, true, false],

nums = (inputs["problem 1"]["nums"])

outputs["problem 1"] = "true, false, true, false"

## problem 2
##
##   "problem 2":
##      {
##        "p": 7,
##        "q": 11
##       },
##
##  OUTPUT:     "problem 2" : 7,

input2 = (inputs["problem 2"])

outputs["problem 2"] = "42"


## problem 3
##
## "problem 3":
##    {
##      "p": 7,
##      "q": 11
##    },
##  OUTPUT:     "problem 3" : 13,

input3 = (inputs["problem 3"])

outputs["problem 3"] = "42"



## problem 4
##
##    "problem 4" :
##    {
##	"e" : 7,
##	"n" : 77,
##	"x" : 20
##    },
##  OUTPUT:     "problem 4" : 48,

input4 = (inputs["problem 4"])

outputs["problem 4"] = "42"


## problem 5
##
##    "problem 5" :
##    {
##	   "p" : 7,
##	  "q" : 11,
##	   "y" : 48
##    }
##  OUTPUT:     "problem 5" : 20

input5 = (inputs["problem 5"])

outputs["problem 5"] = "42"



#output
#json.dump(outputs, sys.stdout)
print(json.dumps(outputs, indent="  "))
print()
